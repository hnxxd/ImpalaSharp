/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace ImpalaSharp.Thrift.Hive
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class ColumnStatistics : TBase
  {

    public ColumnStatisticsDesc StatsDesc { get; set; }

    public List<ColumnStatisticsObj> StatsObj { get; set; }

    public ColumnStatistics() {
    }

    public ColumnStatistics(ColumnStatisticsDesc statsDesc, List<ColumnStatisticsObj> statsObj) : this() {
      this.StatsDesc = statsDesc;
      this.StatsObj = statsObj;
    }

    public void Read (TProtocol iprot)
    {
      bool isset_statsDesc = false;
      bool isset_statsObj = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              StatsDesc = new ColumnStatisticsDesc();
              StatsDesc.Read(iprot);
              isset_statsDesc = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                StatsObj = new List<ColumnStatisticsObj>();
                TList _list110 = iprot.ReadListBegin();
                for( int _i111 = 0; _i111 < _list110.Count; ++_i111)
                {
                  ColumnStatisticsObj _elem112 = new ColumnStatisticsObj();
                  _elem112 = new ColumnStatisticsObj();
                  _elem112.Read(iprot);
                  StatsObj.Add(_elem112);
                }
                iprot.ReadListEnd();
              }
              isset_statsObj = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_statsDesc)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_statsObj)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("ColumnStatistics");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      field.Name = "statsDesc";
      field.Type = TType.Struct;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      StatsDesc.Write(oprot);
      oprot.WriteFieldEnd();
      field.Name = "statsObj";
      field.Type = TType.List;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.Struct, StatsObj.Count));
        foreach (ColumnStatisticsObj _iter113 in StatsObj)
        {
          _iter113.Write(oprot);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("ColumnStatistics(");
      sb.Append("StatsDesc: ");
      sb.Append(StatsDesc== null ? "<null>" : StatsDesc.ToString());
      sb.Append(",StatsObj: ");
      sb.Append(StatsObj);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
