/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace ImpalaSharp.Thrift.Hive
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class LongColumnStatsData : TBase
  {

    public long LowValue { get; set; }

    public long HighValue { get; set; }

    public long NumNulls { get; set; }

    public long NumDVs { get; set; }

    public LongColumnStatsData() {
    }

    public LongColumnStatsData(long lowValue, long highValue, long numNulls, long numDVs) : this() {
      this.LowValue = lowValue;
      this.HighValue = highValue;
      this.NumNulls = numNulls;
      this.NumDVs = numDVs;
    }

    public void Read (TProtocol iprot)
    {
      bool isset_lowValue = false;
      bool isset_highValue = false;
      bool isset_numNulls = false;
      bool isset_numDVs = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              LowValue = iprot.ReadI64();
              isset_lowValue = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I64) {
              HighValue = iprot.ReadI64();
              isset_highValue = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I64) {
              NumNulls = iprot.ReadI64();
              isset_numNulls = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I64) {
              NumDVs = iprot.ReadI64();
              isset_numDVs = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_lowValue)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_highValue)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_numNulls)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_numDVs)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("LongColumnStatsData");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      field.Name = "lowValue";
      field.Type = TType.I64;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteI64(LowValue);
      oprot.WriteFieldEnd();
      field.Name = "highValue";
      field.Type = TType.I64;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      oprot.WriteI64(HighValue);
      oprot.WriteFieldEnd();
      field.Name = "numNulls";
      field.Type = TType.I64;
      field.ID = 3;
      oprot.WriteFieldBegin(field);
      oprot.WriteI64(NumNulls);
      oprot.WriteFieldEnd();
      field.Name = "numDVs";
      field.Type = TType.I64;
      field.ID = 4;
      oprot.WriteFieldBegin(field);
      oprot.WriteI64(NumDVs);
      oprot.WriteFieldEnd();
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("LongColumnStatsData(");
      sb.Append("LowValue: ");
      sb.Append(LowValue);
      sb.Append(",HighValue: ");
      sb.Append(HighValue);
      sb.Append(",NumNulls: ");
      sb.Append(NumNulls);
      sb.Append(",NumDVs: ");
      sb.Append(NumDVs);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
