/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace ImpalaSharp.Thrift.Hive
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SkewedInfo : TBase
  {
    private List<string> _skewedColNames;
    private List<List<string>> _skewedColValues;
    private Dictionary<List<string>, string> _skewedColValueLocationMaps;

    public List<string> SkewedColNames
    {
      get
      {
        return _skewedColNames;
      }
      set
      {
        __isset.skewedColNames = true;
        this._skewedColNames = value;
      }
    }

    public List<List<string>> SkewedColValues
    {
      get
      {
        return _skewedColValues;
      }
      set
      {
        __isset.skewedColValues = true;
        this._skewedColValues = value;
      }
    }

    public Dictionary<List<string>, string> SkewedColValueLocationMaps
    {
      get
      {
        return _skewedColValueLocationMaps;
      }
      set
      {
        __isset.skewedColValueLocationMaps = true;
        this._skewedColValueLocationMaps = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool skewedColNames;
      public bool skewedColValues;
      public bool skewedColValueLocationMaps;
    }

    public SkewedInfo() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                SkewedColNames = new List<string>();
                TList _list49 = iprot.ReadListBegin();
                for( int _i50 = 0; _i50 < _list49.Count; ++_i50)
                {
                  string _elem51 = null;
                  _elem51 = iprot.ReadString();
                  SkewedColNames.Add(_elem51);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                SkewedColValues = new List<List<string>>();
                TList _list52 = iprot.ReadListBegin();
                for( int _i53 = 0; _i53 < _list52.Count; ++_i53)
                {
                  List<string> _elem54 = new List<string>();
                  {
                    _elem54 = new List<string>();
                    TList _list55 = iprot.ReadListBegin();
                    for( int _i56 = 0; _i56 < _list55.Count; ++_i56)
                    {
                      string _elem57 = null;
                      _elem57 = iprot.ReadString();
                      _elem54.Add(_elem57);
                    }
                    iprot.ReadListEnd();
                  }
                  SkewedColValues.Add(_elem54);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Map) {
              {
                SkewedColValueLocationMaps = new Dictionary<List<string>, string>();
                TMap _map58 = iprot.ReadMapBegin();
                for( int _i59 = 0; _i59 < _map58.Count; ++_i59)
                {
                  List<string> _key60;
                  string _val61;
                  {
                    _key60 = new List<string>();
                    TList _list62 = iprot.ReadListBegin();
                    for( int _i63 = 0; _i63 < _list62.Count; ++_i63)
                    {
                      string _elem64 = null;
                      _elem64 = iprot.ReadString();
                      _key60.Add(_elem64);
                    }
                    iprot.ReadListEnd();
                  }
                  _val61 = iprot.ReadString();
                  SkewedColValueLocationMaps[_key60] = _val61;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("SkewedInfo");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (SkewedColNames != null && __isset.skewedColNames) {
        field.Name = "skewedColNames";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, SkewedColNames.Count));
          foreach (string _iter65 in SkewedColNames)
          {
            oprot.WriteString(_iter65);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (SkewedColValues != null && __isset.skewedColValues) {
        field.Name = "skewedColValues";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.List, SkewedColValues.Count));
          foreach (List<string> _iter66 in SkewedColValues)
          {
            {
              oprot.WriteListBegin(new TList(TType.String, _iter66.Count));
              foreach (string _iter67 in _iter66)
              {
                oprot.WriteString(_iter67);
              }
              oprot.WriteListEnd();
            }
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (SkewedColValueLocationMaps != null && __isset.skewedColValueLocationMaps) {
        field.Name = "skewedColValueLocationMaps";
        field.Type = TType.Map;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.List, TType.String, SkewedColValueLocationMaps.Count));
          foreach (List<string> _iter68 in SkewedColValueLocationMaps.Keys)
          {
            {
              oprot.WriteListBegin(new TList(TType.String, _iter68.Count));
              foreach (string _iter69 in _iter68)
              {
                oprot.WriteString(_iter69);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteString(SkewedColValueLocationMaps[_iter68]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("SkewedInfo(");
      sb.Append("SkewedColNames: ");
      sb.Append(SkewedColNames);
      sb.Append(",SkewedColValues: ");
      sb.Append(SkewedColValues);
      sb.Append(",SkewedColValueLocationMaps: ");
      sb.Append(SkewedColValueLocationMaps);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
