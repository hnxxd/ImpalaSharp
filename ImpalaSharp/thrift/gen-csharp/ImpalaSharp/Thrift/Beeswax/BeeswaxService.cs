/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace ImpalaSharp.Thrift.Beeswax
{
  public partial class BeeswaxService {
    public interface Iface {
      /// <summary>
      /// Submit a query and return a handle (QueryHandle). The query runs asynchronously.
      /// </summary>
      /// <param name="query"></param>
      QueryHandle query(Query query);
      #if SILVERLIGHT
      IAsyncResult Begin_query(AsyncCallback callback, object state, Query query);
      QueryHandle End_query(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// run a query synchronously and return a handle (QueryHandle).
      /// </summary>
      /// <param name="query"></param>
      /// <param name="clientCtx"></param>
      QueryHandle executeAndWait(Query query, string clientCtx);
      #if SILVERLIGHT
      IAsyncResult Begin_executeAndWait(AsyncCallback callback, object state, Query query, string clientCtx);
      QueryHandle End_executeAndWait(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Get the query plan for a query.
      /// </summary>
      /// <param name="query"></param>
      QueryExplanation explain(Query query);
      #if SILVERLIGHT
      IAsyncResult Begin_explain(AsyncCallback callback, object state, Query query);
      QueryExplanation End_explain(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Get the results of a query. This is non-blocking. Caller should check
      /// Results.ready to determine if the results are in yet. The call requests
      /// the batch size of fetch.
      /// </summary>
      /// <param name="query_id"></param>
      /// <param name="start_over"></param>
      /// <param name="fetch_size"></param>
      Results fetch(QueryHandle query_id, bool start_over, int fetch_size);
      #if SILVERLIGHT
      IAsyncResult Begin_fetch(AsyncCallback callback, object state, QueryHandle query_id, bool start_over, int fetch_size);
      Results End_fetch(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Get the state of the query
      /// </summary>
      /// <param name="handle"></param>
      QueryState get_state(QueryHandle handle);
      #if SILVERLIGHT
      IAsyncResult Begin_get_state(AsyncCallback callback, object state, QueryHandle handle);
      QueryState End_get_state(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Get the result metadata
      /// </summary>
      /// <param name="handle"></param>
      ResultsMetadata get_results_metadata(QueryHandle handle);
      #if SILVERLIGHT
      IAsyncResult Begin_get_results_metadata(AsyncCallback callback, object state, QueryHandle handle);
      ResultsMetadata End_get_results_metadata(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Used to test connection to server.  A "noop" command.
      /// </summary>
      /// <param name="s"></param>
      string echo(string s);
      #if SILVERLIGHT
      IAsyncResult Begin_echo(AsyncCallback callback, object state, string s);
      string End_echo(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Returns a string representation of the configuration object being used.
      /// Handy for debugging.
      /// </summary>
      string dump_config();
      #if SILVERLIGHT
      IAsyncResult Begin_dump_config(AsyncCallback callback, object state);
      string End_dump_config(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// Get the log messages related to the given context.
      /// </summary>
      /// <param name="context"></param>
      string get_log(string context);
      #if SILVERLIGHT
      IAsyncResult Begin_get_log(AsyncCallback callback, object state, string context);
      string End_get_log(IAsyncResult asyncResult);
      #endif
      List<ConfigVariable> get_default_configuration(bool include_hadoop);
      #if SILVERLIGHT
      IAsyncResult Begin_get_default_configuration(AsyncCallback callback, object state, bool include_hadoop);
      List<ConfigVariable> End_get_default_configuration(IAsyncResult asyncResult);
      #endif
      void close(QueryHandle handle);
      #if SILVERLIGHT
      IAsyncResult Begin_close(AsyncCallback callback, object state, QueryHandle handle);
      void End_close(IAsyncResult asyncResult);
      #endif
      void clean(string log_context);
      #if SILVERLIGHT
      IAsyncResult Begin_clean(AsyncCallback callback, object state, string log_context);
      void End_clean(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_query(AsyncCallback callback, object state, Query query)
      {
        return send_query(callback, state, query);
      }

      public QueryHandle End_query(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_query();
      }

      #endif

      /// <summary>
      /// Submit a query and return a handle (QueryHandle). The query runs asynchronously.
      /// </summary>
      /// <param name="query"></param>
      public QueryHandle query(Query query)
      {
        #if !SILVERLIGHT
        send_query(query);
        return recv_query();

        #else
        var asyncResult = Begin_query(null, null, query);
        return End_query(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_query(AsyncCallback callback, object state, Query query)
      #else
      public void send_query(Query query)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("query", TMessageType.Call, seqid_));
        query_args args = new query_args();
        args.Query = query;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public QueryHandle recv_query()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        query_result result = new query_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.error) {
          throw result.Error;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "query failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_executeAndWait(AsyncCallback callback, object state, Query query, string clientCtx)
      {
        return send_executeAndWait(callback, state, query, clientCtx);
      }

      public QueryHandle End_executeAndWait(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_executeAndWait();
      }

      #endif

      /// <summary>
      /// run a query synchronously and return a handle (QueryHandle).
      /// </summary>
      /// <param name="query"></param>
      /// <param name="clientCtx"></param>
      public QueryHandle executeAndWait(Query query, string clientCtx)
      {
        #if !SILVERLIGHT
        send_executeAndWait(query, clientCtx);
        return recv_executeAndWait();

        #else
        var asyncResult = Begin_executeAndWait(null, null, query, clientCtx);
        return End_executeAndWait(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_executeAndWait(AsyncCallback callback, object state, Query query, string clientCtx)
      #else
      public void send_executeAndWait(Query query, string clientCtx)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("executeAndWait", TMessageType.Call, seqid_));
        executeAndWait_args args = new executeAndWait_args();
        args.Query = query;
        args.ClientCtx = clientCtx;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public QueryHandle recv_executeAndWait()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        executeAndWait_result result = new executeAndWait_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.error) {
          throw result.Error;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "executeAndWait failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_explain(AsyncCallback callback, object state, Query query)
      {
        return send_explain(callback, state, query);
      }

      public QueryExplanation End_explain(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_explain();
      }

      #endif

      /// <summary>
      /// Get the query plan for a query.
      /// </summary>
      /// <param name="query"></param>
      public QueryExplanation explain(Query query)
      {
        #if !SILVERLIGHT
        send_explain(query);
        return recv_explain();

        #else
        var asyncResult = Begin_explain(null, null, query);
        return End_explain(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_explain(AsyncCallback callback, object state, Query query)
      #else
      public void send_explain(Query query)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("explain", TMessageType.Call, seqid_));
        explain_args args = new explain_args();
        args.Query = query;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public QueryExplanation recv_explain()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        explain_result result = new explain_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.error) {
          throw result.Error;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "explain failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_fetch(AsyncCallback callback, object state, QueryHandle query_id, bool start_over, int fetch_size)
      {
        return send_fetch(callback, state, query_id, start_over, fetch_size);
      }

      public Results End_fetch(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_fetch();
      }

      #endif

      /// <summary>
      /// Get the results of a query. This is non-blocking. Caller should check
      /// Results.ready to determine if the results are in yet. The call requests
      /// the batch size of fetch.
      /// </summary>
      /// <param name="query_id"></param>
      /// <param name="start_over"></param>
      /// <param name="fetch_size"></param>
      public Results fetch(QueryHandle query_id, bool start_over, int fetch_size)
      {
        #if !SILVERLIGHT
        send_fetch(query_id, start_over, fetch_size);
        return recv_fetch();

        #else
        var asyncResult = Begin_fetch(null, null, query_id, start_over, fetch_size);
        return End_fetch(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_fetch(AsyncCallback callback, object state, QueryHandle query_id, bool start_over, int fetch_size)
      #else
      public void send_fetch(QueryHandle query_id, bool start_over, int fetch_size)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("fetch", TMessageType.Call, seqid_));
        fetch_args args = new fetch_args();
        args.Query_id = query_id;
        args.Start_over = start_over;
        args.Fetch_size = fetch_size;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Results recv_fetch()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        fetch_result result = new fetch_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.error) {
          throw result.Error;
        }
        if (result.__isset.error2) {
          throw result.Error2;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "fetch failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_get_state(AsyncCallback callback, object state, QueryHandle handle)
      {
        return send_get_state(callback, state, handle);
      }

      public QueryState End_get_state(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_get_state();
      }

      #endif

      /// <summary>
      /// Get the state of the query
      /// </summary>
      /// <param name="handle"></param>
      public QueryState get_state(QueryHandle handle)
      {
        #if !SILVERLIGHT
        send_get_state(handle);
        return recv_get_state();

        #else
        var asyncResult = Begin_get_state(null, null, handle);
        return End_get_state(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_get_state(AsyncCallback callback, object state, QueryHandle handle)
      #else
      public void send_get_state(QueryHandle handle)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("get_state", TMessageType.Call, seqid_));
        get_state_args args = new get_state_args();
        args.Handle = handle;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public QueryState recv_get_state()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        get_state_result result = new get_state_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.error) {
          throw result.Error;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_state failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_get_results_metadata(AsyncCallback callback, object state, QueryHandle handle)
      {
        return send_get_results_metadata(callback, state, handle);
      }

      public ResultsMetadata End_get_results_metadata(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_get_results_metadata();
      }

      #endif

      /// <summary>
      /// Get the result metadata
      /// </summary>
      /// <param name="handle"></param>
      public ResultsMetadata get_results_metadata(QueryHandle handle)
      {
        #if !SILVERLIGHT
        send_get_results_metadata(handle);
        return recv_get_results_metadata();

        #else
        var asyncResult = Begin_get_results_metadata(null, null, handle);
        return End_get_results_metadata(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_get_results_metadata(AsyncCallback callback, object state, QueryHandle handle)
      #else
      public void send_get_results_metadata(QueryHandle handle)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("get_results_metadata", TMessageType.Call, seqid_));
        get_results_metadata_args args = new get_results_metadata_args();
        args.Handle = handle;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public ResultsMetadata recv_get_results_metadata()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        get_results_metadata_result result = new get_results_metadata_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.error) {
          throw result.Error;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_results_metadata failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_echo(AsyncCallback callback, object state, string s)
      {
        return send_echo(callback, state, s);
      }

      public string End_echo(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_echo();
      }

      #endif

      /// <summary>
      /// Used to test connection to server.  A "noop" command.
      /// </summary>
      /// <param name="s"></param>
      public string echo(string s)
      {
        #if !SILVERLIGHT
        send_echo(s);
        return recv_echo();

        #else
        var asyncResult = Begin_echo(null, null, s);
        return End_echo(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_echo(AsyncCallback callback, object state, string s)
      #else
      public void send_echo(string s)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("echo", TMessageType.Call, seqid_));
        echo_args args = new echo_args();
        args.S = s;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_echo()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        echo_result result = new echo_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "echo failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_dump_config(AsyncCallback callback, object state)
      {
        return send_dump_config(callback, state);
      }

      public string End_dump_config(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_dump_config();
      }

      #endif

      /// <summary>
      /// Returns a string representation of the configuration object being used.
      /// Handy for debugging.
      /// </summary>
      public string dump_config()
      {
        #if !SILVERLIGHT
        send_dump_config();
        return recv_dump_config();

        #else
        var asyncResult = Begin_dump_config(null, null);
        return End_dump_config(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_dump_config(AsyncCallback callback, object state)
      #else
      public void send_dump_config()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("dump_config", TMessageType.Call, seqid_));
        dump_config_args args = new dump_config_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_dump_config()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        dump_config_result result = new dump_config_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "dump_config failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_get_log(AsyncCallback callback, object state, string context)
      {
        return send_get_log(callback, state, context);
      }

      public string End_get_log(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_get_log();
      }

      #endif

      /// <summary>
      /// Get the log messages related to the given context.
      /// </summary>
      /// <param name="context"></param>
      public string get_log(string context)
      {
        #if !SILVERLIGHT
        send_get_log(context);
        return recv_get_log();

        #else
        var asyncResult = Begin_get_log(null, null, context);
        return End_get_log(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_get_log(AsyncCallback callback, object state, string context)
      #else
      public void send_get_log(string context)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("get_log", TMessageType.Call, seqid_));
        get_log_args args = new get_log_args();
        args.Context = context;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_get_log()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        get_log_result result = new get_log_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.error) {
          throw result.Error;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_log failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_get_default_configuration(AsyncCallback callback, object state, bool include_hadoop)
      {
        return send_get_default_configuration(callback, state, include_hadoop);
      }

      public List<ConfigVariable> End_get_default_configuration(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_get_default_configuration();
      }

      #endif

      public List<ConfigVariable> get_default_configuration(bool include_hadoop)
      {
        #if !SILVERLIGHT
        send_get_default_configuration(include_hadoop);
        return recv_get_default_configuration();

        #else
        var asyncResult = Begin_get_default_configuration(null, null, include_hadoop);
        return End_get_default_configuration(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_get_default_configuration(AsyncCallback callback, object state, bool include_hadoop)
      #else
      public void send_get_default_configuration(bool include_hadoop)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("get_default_configuration", TMessageType.Call, seqid_));
        get_default_configuration_args args = new get_default_configuration_args();
        args.Include_hadoop = include_hadoop;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<ConfigVariable> recv_get_default_configuration()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        get_default_configuration_result result = new get_default_configuration_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_default_configuration failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_close(AsyncCallback callback, object state, QueryHandle handle)
      {
        return send_close(callback, state, handle);
      }

      public void End_close(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_close();
      }

      #endif

      public void close(QueryHandle handle)
      {
        #if !SILVERLIGHT
        send_close(handle);
        recv_close();

        #else
        var asyncResult = Begin_close(null, null, handle);
        End_close(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_close(AsyncCallback callback, object state, QueryHandle handle)
      #else
      public void send_close(QueryHandle handle)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("close", TMessageType.Call, seqid_));
        close_args args = new close_args();
        args.Handle = handle;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_close()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        close_result result = new close_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.error) {
          throw result.Error;
        }
        if (result.__isset.error2) {
          throw result.Error2;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_clean(AsyncCallback callback, object state, string log_context)
      {
        return send_clean(callback, state, log_context);
      }

      public void End_clean(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_clean();
      }

      #endif

      public void clean(string log_context)
      {
        #if !SILVERLIGHT
        send_clean(log_context);
        recv_clean();

        #else
        var asyncResult = Begin_clean(null, null, log_context);
        End_clean(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_clean(AsyncCallback callback, object state, string log_context)
      #else
      public void send_clean(string log_context)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("clean", TMessageType.Call, seqid_));
        clean_args args = new clean_args();
        args.Log_context = log_context;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_clean()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        clean_result result = new clean_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["query"] = query_Process;
        processMap_["executeAndWait"] = executeAndWait_Process;
        processMap_["explain"] = explain_Process;
        processMap_["fetch"] = fetch_Process;
        processMap_["get_state"] = get_state_Process;
        processMap_["get_results_metadata"] = get_results_metadata_Process;
        processMap_["echo"] = echo_Process;
        processMap_["dump_config"] = dump_config_Process;
        processMap_["get_log"] = get_log_Process;
        processMap_["get_default_configuration"] = get_default_configuration_Process;
        processMap_["close"] = close_Process;
        processMap_["clean"] = clean_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void query_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        query_args args = new query_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        query_result result = new query_result();
        try {
          result.Success = iface_.query(args.Query);
        } catch (BeeswaxException error) {
          result.Error = error;
        }
        oprot.WriteMessageBegin(new TMessage("query", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void executeAndWait_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        executeAndWait_args args = new executeAndWait_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        executeAndWait_result result = new executeAndWait_result();
        try {
          result.Success = iface_.executeAndWait(args.Query, args.ClientCtx);
        } catch (BeeswaxException error) {
          result.Error = error;
        }
        oprot.WriteMessageBegin(new TMessage("executeAndWait", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void explain_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        explain_args args = new explain_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        explain_result result = new explain_result();
        try {
          result.Success = iface_.explain(args.Query);
        } catch (BeeswaxException error) {
          result.Error = error;
        }
        oprot.WriteMessageBegin(new TMessage("explain", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void fetch_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        fetch_args args = new fetch_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        fetch_result result = new fetch_result();
        try {
          result.Success = iface_.fetch(args.Query_id, args.Start_over, args.Fetch_size);
        } catch (QueryNotFoundException error) {
          result.Error = error;
        } catch (BeeswaxException error2) {
          result.Error2 = error2;
        }
        oprot.WriteMessageBegin(new TMessage("fetch", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void get_state_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        get_state_args args = new get_state_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        get_state_result result = new get_state_result();
        try {
          result.Success = iface_.get_state(args.Handle);
        } catch (QueryNotFoundException error) {
          result.Error = error;
        }
        oprot.WriteMessageBegin(new TMessage("get_state", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void get_results_metadata_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        get_results_metadata_args args = new get_results_metadata_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        get_results_metadata_result result = new get_results_metadata_result();
        try {
          result.Success = iface_.get_results_metadata(args.Handle);
        } catch (QueryNotFoundException error) {
          result.Error = error;
        }
        oprot.WriteMessageBegin(new TMessage("get_results_metadata", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void echo_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        echo_args args = new echo_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        echo_result result = new echo_result();
        result.Success = iface_.echo(args.S);
        oprot.WriteMessageBegin(new TMessage("echo", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void dump_config_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        dump_config_args args = new dump_config_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        dump_config_result result = new dump_config_result();
        result.Success = iface_.dump_config();
        oprot.WriteMessageBegin(new TMessage("dump_config", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void get_log_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        get_log_args args = new get_log_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        get_log_result result = new get_log_result();
        try {
          result.Success = iface_.get_log(args.Context);
        } catch (QueryNotFoundException error) {
          result.Error = error;
        }
        oprot.WriteMessageBegin(new TMessage("get_log", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void get_default_configuration_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        get_default_configuration_args args = new get_default_configuration_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        get_default_configuration_result result = new get_default_configuration_result();
        result.Success = iface_.get_default_configuration(args.Include_hadoop);
        oprot.WriteMessageBegin(new TMessage("get_default_configuration", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void close_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        close_args args = new close_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        close_result result = new close_result();
        try {
          iface_.close(args.Handle);
        } catch (QueryNotFoundException error) {
          result.Error = error;
        } catch (BeeswaxException error2) {
          result.Error2 = error2;
        }
        oprot.WriteMessageBegin(new TMessage("close", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void clean_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        clean_args args = new clean_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        clean_result result = new clean_result();
        iface_.clean(args.Log_context);
        oprot.WriteMessageBegin(new TMessage("clean", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class query_args : TBase
    {
      private Query _query;

      public Query Query
      {
        get
        {
          return _query;
        }
        set
        {
          __isset.query = true;
          this._query = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool query;
      }

      public query_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Query = new Query();
                Query.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("query_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Query != null && __isset.query) {
          field.Name = "query";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Query.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("query_args(");
        sb.Append("Query: ");
        sb.Append(Query== null ? "<null>" : Query.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class query_result : TBase
    {
      private QueryHandle _success;
      private BeeswaxException _error;

      public QueryHandle Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public BeeswaxException Error
      {
        get
        {
          return _error;
        }
        set
        {
          __isset.error = true;
          this._error = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool error;
      }

      public query_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new QueryHandle();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Error = new BeeswaxException();
                Error.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("query_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.error) {
          if (Error != null) {
            field.Name = "Error";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Error.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("query_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Error: ");
        sb.Append(Error== null ? "<null>" : Error.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class executeAndWait_args : TBase
    {
      private Query _query;
      private string _clientCtx;

      public Query Query
      {
        get
        {
          return _query;
        }
        set
        {
          __isset.query = true;
          this._query = value;
        }
      }

      public string ClientCtx
      {
        get
        {
          return _clientCtx;
        }
        set
        {
          __isset.clientCtx = true;
          this._clientCtx = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool query;
        public bool clientCtx;
      }

      public executeAndWait_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Query = new Query();
                Query.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                ClientCtx = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("executeAndWait_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Query != null && __isset.query) {
          field.Name = "query";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Query.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (ClientCtx != null && __isset.clientCtx) {
          field.Name = "clientCtx";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ClientCtx);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("executeAndWait_args(");
        sb.Append("Query: ");
        sb.Append(Query== null ? "<null>" : Query.ToString());
        sb.Append(",ClientCtx: ");
        sb.Append(ClientCtx);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class executeAndWait_result : TBase
    {
      private QueryHandle _success;
      private BeeswaxException _error;

      public QueryHandle Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public BeeswaxException Error
      {
        get
        {
          return _error;
        }
        set
        {
          __isset.error = true;
          this._error = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool error;
      }

      public executeAndWait_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new QueryHandle();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Error = new BeeswaxException();
                Error.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("executeAndWait_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.error) {
          if (Error != null) {
            field.Name = "Error";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Error.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("executeAndWait_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Error: ");
        sb.Append(Error== null ? "<null>" : Error.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class explain_args : TBase
    {
      private Query _query;

      public Query Query
      {
        get
        {
          return _query;
        }
        set
        {
          __isset.query = true;
          this._query = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool query;
      }

      public explain_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Query = new Query();
                Query.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("explain_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Query != null && __isset.query) {
          field.Name = "query";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Query.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("explain_args(");
        sb.Append("Query: ");
        sb.Append(Query== null ? "<null>" : Query.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class explain_result : TBase
    {
      private QueryExplanation _success;
      private BeeswaxException _error;

      public QueryExplanation Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public BeeswaxException Error
      {
        get
        {
          return _error;
        }
        set
        {
          __isset.error = true;
          this._error = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool error;
      }

      public explain_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new QueryExplanation();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Error = new BeeswaxException();
                Error.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("explain_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.error) {
          if (Error != null) {
            field.Name = "Error";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Error.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("explain_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Error: ");
        sb.Append(Error== null ? "<null>" : Error.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class fetch_args : TBase
    {
      private QueryHandle _query_id;
      private bool _start_over;
      private int _fetch_size;

      public QueryHandle Query_id
      {
        get
        {
          return _query_id;
        }
        set
        {
          __isset.query_id = true;
          this._query_id = value;
        }
      }

      public bool Start_over
      {
        get
        {
          return _start_over;
        }
        set
        {
          __isset.start_over = true;
          this._start_over = value;
        }
      }

      public int Fetch_size
      {
        get
        {
          return _fetch_size;
        }
        set
        {
          __isset.fetch_size = true;
          this._fetch_size = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool query_id;
        public bool start_over;
        public bool fetch_size;
      }

      public fetch_args() {
        this._fetch_size = -1;
        this.__isset.fetch_size = true;
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Query_id = new QueryHandle();
                Query_id.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Bool) {
                Start_over = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                Fetch_size = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("fetch_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Query_id != null && __isset.query_id) {
          field.Name = "query_id";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Query_id.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.start_over) {
          field.Name = "start_over";
          field.Type = TType.Bool;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Start_over);
          oprot.WriteFieldEnd();
        }
        if (__isset.fetch_size) {
          field.Name = "fetch_size";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(Fetch_size);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("fetch_args(");
        sb.Append("Query_id: ");
        sb.Append(Query_id== null ? "<null>" : Query_id.ToString());
        sb.Append(",Start_over: ");
        sb.Append(Start_over);
        sb.Append(",Fetch_size: ");
        sb.Append(Fetch_size);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class fetch_result : TBase
    {
      private Results _success;
      private QueryNotFoundException _error;
      private BeeswaxException _error2;

      public Results Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public QueryNotFoundException Error
      {
        get
        {
          return _error;
        }
        set
        {
          __isset.error = true;
          this._error = value;
        }
      }

      public BeeswaxException Error2
      {
        get
        {
          return _error2;
        }
        set
        {
          __isset.error2 = true;
          this._error2 = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool error;
        public bool error2;
      }

      public fetch_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Results();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Error = new QueryNotFoundException();
                Error.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Error2 = new BeeswaxException();
                Error2.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("fetch_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.error) {
          if (Error != null) {
            field.Name = "Error";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Error.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.error2) {
          if (Error2 != null) {
            field.Name = "Error2";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Error2.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("fetch_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Error: ");
        sb.Append(Error== null ? "<null>" : Error.ToString());
        sb.Append(",Error2: ");
        sb.Append(Error2== null ? "<null>" : Error2.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class get_state_args : TBase
    {
      private QueryHandle _handle;

      public QueryHandle Handle
      {
        get
        {
          return _handle;
        }
        set
        {
          __isset.handle = true;
          this._handle = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool handle;
      }

      public get_state_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Handle = new QueryHandle();
                Handle.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_state_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Handle != null && __isset.handle) {
          field.Name = "handle";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Handle.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_state_args(");
        sb.Append("Handle: ");
        sb.Append(Handle== null ? "<null>" : Handle.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class get_state_result : TBase
    {
      private QueryState _success;
      private QueryNotFoundException _error;

      /// <summary>
      /// 
      /// <seealso cref="QueryState"/>
      /// </summary>
      public QueryState Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public QueryNotFoundException Error
      {
        get
        {
          return _error;
        }
        set
        {
          __isset.error = true;
          this._error = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool error;
      }

      public get_state_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (QueryState)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Error = new QueryNotFoundException();
                Error.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_state_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.error) {
          if (Error != null) {
            field.Name = "Error";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Error.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_state_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",Error: ");
        sb.Append(Error== null ? "<null>" : Error.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class get_results_metadata_args : TBase
    {
      private QueryHandle _handle;

      public QueryHandle Handle
      {
        get
        {
          return _handle;
        }
        set
        {
          __isset.handle = true;
          this._handle = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool handle;
      }

      public get_results_metadata_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Handle = new QueryHandle();
                Handle.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_results_metadata_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Handle != null && __isset.handle) {
          field.Name = "handle";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Handle.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_results_metadata_args(");
        sb.Append("Handle: ");
        sb.Append(Handle== null ? "<null>" : Handle.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class get_results_metadata_result : TBase
    {
      private ResultsMetadata _success;
      private QueryNotFoundException _error;

      public ResultsMetadata Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public QueryNotFoundException Error
      {
        get
        {
          return _error;
        }
        set
        {
          __isset.error = true;
          this._error = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool error;
      }

      public get_results_metadata_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ResultsMetadata();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Error = new QueryNotFoundException();
                Error.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_results_metadata_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.error) {
          if (Error != null) {
            field.Name = "Error";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Error.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_results_metadata_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Error: ");
        sb.Append(Error== null ? "<null>" : Error.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class echo_args : TBase
    {
      private string _s;

      public string S
      {
        get
        {
          return _s;
        }
        set
        {
          __isset.s = true;
          this._s = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool s;
      }

      public echo_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                S = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("echo_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (S != null && __isset.s) {
          field.Name = "s";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(S);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("echo_args(");
        sb.Append("S: ");
        sb.Append(S);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class echo_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public echo_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("echo_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("echo_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class dump_config_args : TBase
    {

      public dump_config_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("dump_config_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("dump_config_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class dump_config_result : TBase
    {
      private string _success;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public dump_config_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("dump_config_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("dump_config_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class get_log_args : TBase
    {
      private string _context;

      public string Context
      {
        get
        {
          return _context;
        }
        set
        {
          __isset.context = true;
          this._context = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool context;
      }

      public get_log_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Context = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_log_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Context != null && __isset.context) {
          field.Name = "context";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Context);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_log_args(");
        sb.Append("Context: ");
        sb.Append(Context);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class get_log_result : TBase
    {
      private string _success;
      private QueryNotFoundException _error;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public QueryNotFoundException Error
      {
        get
        {
          return _error;
        }
        set
        {
          __isset.error = true;
          this._error = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool error;
      }

      public get_log_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Error = new QueryNotFoundException();
                Error.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_log_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.error) {
          if (Error != null) {
            field.Name = "Error";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Error.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_log_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",Error: ");
        sb.Append(Error== null ? "<null>" : Error.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class get_default_configuration_args : TBase
    {
      private bool _include_hadoop;

      public bool Include_hadoop
      {
        get
        {
          return _include_hadoop;
        }
        set
        {
          __isset.include_hadoop = true;
          this._include_hadoop = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool include_hadoop;
      }

      public get_default_configuration_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Bool) {
                Include_hadoop = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_default_configuration_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.include_hadoop) {
          field.Name = "include_hadoop";
          field.Type = TType.Bool;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Include_hadoop);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_default_configuration_args(");
        sb.Append("Include_hadoop: ");
        sb.Append(Include_hadoop);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class get_default_configuration_result : TBase
    {
      private List<ConfigVariable> _success;

      public List<ConfigVariable> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public get_default_configuration_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<ConfigVariable>();
                  TList _list12 = iprot.ReadListBegin();
                  for( int _i13 = 0; _i13 < _list12.Count; ++_i13)
                  {
                    ConfigVariable _elem14 = new ConfigVariable();
                    _elem14 = new ConfigVariable();
                    _elem14.Read(iprot);
                    Success.Add(_elem14);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_default_configuration_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (ConfigVariable _iter15 in Success)
              {
                _iter15.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_default_configuration_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class close_args : TBase
    {
      private QueryHandle _handle;

      public QueryHandle Handle
      {
        get
        {
          return _handle;
        }
        set
        {
          __isset.handle = true;
          this._handle = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool handle;
      }

      public close_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Handle = new QueryHandle();
                Handle.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("close_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Handle != null && __isset.handle) {
          field.Name = "handle";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Handle.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("close_args(");
        sb.Append("Handle: ");
        sb.Append(Handle== null ? "<null>" : Handle.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class close_result : TBase
    {
      private QueryNotFoundException _error;
      private BeeswaxException _error2;

      public QueryNotFoundException Error
      {
        get
        {
          return _error;
        }
        set
        {
          __isset.error = true;
          this._error = value;
        }
      }

      public BeeswaxException Error2
      {
        get
        {
          return _error2;
        }
        set
        {
          __isset.error2 = true;
          this._error2 = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool error;
        public bool error2;
      }

      public close_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Error = new QueryNotFoundException();
                Error.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Error2 = new BeeswaxException();
                Error2.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("close_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.error) {
          if (Error != null) {
            field.Name = "Error";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Error.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.error2) {
          if (Error2 != null) {
            field.Name = "Error2";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Error2.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("close_result(");
        sb.Append("Error: ");
        sb.Append(Error== null ? "<null>" : Error.ToString());
        sb.Append(",Error2: ");
        sb.Append(Error2== null ? "<null>" : Error2.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class clean_args : TBase
    {
      private string _log_context;

      public string Log_context
      {
        get
        {
          return _log_context;
        }
        set
        {
          __isset.log_context = true;
          this._log_context = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool log_context;
      }

      public clean_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Log_context = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("clean_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Log_context != null && __isset.log_context) {
          field.Name = "log_context";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Log_context);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("clean_args(");
        sb.Append("Log_context: ");
        sb.Append(Log_context);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class clean_result : TBase
    {

      public clean_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("clean_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("clean_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }

  }
}
