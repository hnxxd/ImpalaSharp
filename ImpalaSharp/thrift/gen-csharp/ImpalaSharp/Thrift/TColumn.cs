/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace ImpalaSharp.Thrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TColumn : TBase
  {
    private List<TBoolValue> _boolColumn;
    private List<TByteValue> _byteColumn;
    private List<TI16Value> _i16Column;
    private List<TI32Value> _i32Column;
    private List<TI64Value> _i64Column;
    private List<TDoubleValue> _doubleColumn;
    private List<TStringValue> _stringColumn;

    public List<TBoolValue> BoolColumn
    {
      get
      {
        return _boolColumn;
      }
      set
      {
        __isset.boolColumn = true;
        this._boolColumn = value;
      }
    }

    public List<TByteValue> ByteColumn
    {
      get
      {
        return _byteColumn;
      }
      set
      {
        __isset.byteColumn = true;
        this._byteColumn = value;
      }
    }

    public List<TI16Value> I16Column
    {
      get
      {
        return _i16Column;
      }
      set
      {
        __isset.i16Column = true;
        this._i16Column = value;
      }
    }

    public List<TI32Value> I32Column
    {
      get
      {
        return _i32Column;
      }
      set
      {
        __isset.i32Column = true;
        this._i32Column = value;
      }
    }

    public List<TI64Value> I64Column
    {
      get
      {
        return _i64Column;
      }
      set
      {
        __isset.i64Column = true;
        this._i64Column = value;
      }
    }

    public List<TDoubleValue> DoubleColumn
    {
      get
      {
        return _doubleColumn;
      }
      set
      {
        __isset.doubleColumn = true;
        this._doubleColumn = value;
      }
    }

    public List<TStringValue> StringColumn
    {
      get
      {
        return _stringColumn;
      }
      set
      {
        __isset.stringColumn = true;
        this._stringColumn = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool boolColumn;
      public bool byteColumn;
      public bool i16Column;
      public bool i32Column;
      public bool i64Column;
      public bool doubleColumn;
      public bool stringColumn;
    }

    public TColumn() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                BoolColumn = new List<TBoolValue>();
                TList _list18 = iprot.ReadListBegin();
                for( int _i19 = 0; _i19 < _list18.Count; ++_i19)
                {
                  TBoolValue _elem20 = new TBoolValue();
                  _elem20 = new TBoolValue();
                  _elem20.Read(iprot);
                  BoolColumn.Add(_elem20);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                ByteColumn = new List<TByteValue>();
                TList _list21 = iprot.ReadListBegin();
                for( int _i22 = 0; _i22 < _list21.Count; ++_i22)
                {
                  TByteValue _elem23 = new TByteValue();
                  _elem23 = new TByteValue();
                  _elem23.Read(iprot);
                  ByteColumn.Add(_elem23);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                I16Column = new List<TI16Value>();
                TList _list24 = iprot.ReadListBegin();
                for( int _i25 = 0; _i25 < _list24.Count; ++_i25)
                {
                  TI16Value _elem26 = new TI16Value();
                  _elem26 = new TI16Value();
                  _elem26.Read(iprot);
                  I16Column.Add(_elem26);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.List) {
              {
                I32Column = new List<TI32Value>();
                TList _list27 = iprot.ReadListBegin();
                for( int _i28 = 0; _i28 < _list27.Count; ++_i28)
                {
                  TI32Value _elem29 = new TI32Value();
                  _elem29 = new TI32Value();
                  _elem29.Read(iprot);
                  I32Column.Add(_elem29);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.List) {
              {
                I64Column = new List<TI64Value>();
                TList _list30 = iprot.ReadListBegin();
                for( int _i31 = 0; _i31 < _list30.Count; ++_i31)
                {
                  TI64Value _elem32 = new TI64Value();
                  _elem32 = new TI64Value();
                  _elem32.Read(iprot);
                  I64Column.Add(_elem32);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.List) {
              {
                DoubleColumn = new List<TDoubleValue>();
                TList _list33 = iprot.ReadListBegin();
                for( int _i34 = 0; _i34 < _list33.Count; ++_i34)
                {
                  TDoubleValue _elem35 = new TDoubleValue();
                  _elem35 = new TDoubleValue();
                  _elem35.Read(iprot);
                  DoubleColumn.Add(_elem35);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.List) {
              {
                StringColumn = new List<TStringValue>();
                TList _list36 = iprot.ReadListBegin();
                for( int _i37 = 0; _i37 < _list36.Count; ++_i37)
                {
                  TStringValue _elem38 = new TStringValue();
                  _elem38 = new TStringValue();
                  _elem38.Read(iprot);
                  StringColumn.Add(_elem38);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("TColumn");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (BoolColumn != null && __isset.boolColumn) {
        field.Name = "boolColumn";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, BoolColumn.Count));
          foreach (TBoolValue _iter39 in BoolColumn)
          {
            _iter39.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (ByteColumn != null && __isset.byteColumn) {
        field.Name = "byteColumn";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, ByteColumn.Count));
          foreach (TByteValue _iter40 in ByteColumn)
          {
            _iter40.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (I16Column != null && __isset.i16Column) {
        field.Name = "i16Column";
        field.Type = TType.List;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, I16Column.Count));
          foreach (TI16Value _iter41 in I16Column)
          {
            _iter41.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (I32Column != null && __isset.i32Column) {
        field.Name = "i32Column";
        field.Type = TType.List;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, I32Column.Count));
          foreach (TI32Value _iter42 in I32Column)
          {
            _iter42.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (I64Column != null && __isset.i64Column) {
        field.Name = "i64Column";
        field.Type = TType.List;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, I64Column.Count));
          foreach (TI64Value _iter43 in I64Column)
          {
            _iter43.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (DoubleColumn != null && __isset.doubleColumn) {
        field.Name = "doubleColumn";
        field.Type = TType.List;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, DoubleColumn.Count));
          foreach (TDoubleValue _iter44 in DoubleColumn)
          {
            _iter44.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (StringColumn != null && __isset.stringColumn) {
        field.Name = "stringColumn";
        field.Type = TType.List;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, StringColumn.Count));
          foreach (TStringValue _iter45 in StringColumn)
          {
            _iter45.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("TColumn(");
      sb.Append("BoolColumn: ");
      sb.Append(BoolColumn);
      sb.Append(",ByteColumn: ");
      sb.Append(ByteColumn);
      sb.Append(",I16Column: ");
      sb.Append(I16Column);
      sb.Append(",I32Column: ");
      sb.Append(I32Column);
      sb.Append(",I64Column: ");
      sb.Append(I64Column);
      sb.Append(",DoubleColumn: ");
      sb.Append(DoubleColumn);
      sb.Append(",StringColumn: ");
      sb.Append(StringColumn);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
