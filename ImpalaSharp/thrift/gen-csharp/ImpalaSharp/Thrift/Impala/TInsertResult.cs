/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace ImpalaSharp.Thrift.Impala
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TInsertResult : TBase
  {

    public Dictionary<string, long> Rows_appended { get; set; }

    public TInsertResult() {
    }

    public TInsertResult(Dictionary<string, long> rows_appended) : this() {
      this.Rows_appended = rows_appended;
    }

    public void Read (TProtocol iprot)
    {
      bool isset_rows_appended = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Map) {
              {
                Rows_appended = new Dictionary<string, long>();
                TMap _map0 = iprot.ReadMapBegin();
                for( int _i1 = 0; _i1 < _map0.Count; ++_i1)
                {
                  string _key2;
                  long _val3;
                  _key2 = iprot.ReadString();
                  _val3 = iprot.ReadI64();
                  Rows_appended[_key2] = _val3;
                }
                iprot.ReadMapEnd();
              }
              isset_rows_appended = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_rows_appended)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("TInsertResult");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      field.Name = "rows_appended";
      field.Type = TType.Map;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteMapBegin(new TMap(TType.String, TType.I64, Rows_appended.Count));
        foreach (string _iter4 in Rows_appended.Keys)
        {
          oprot.WriteString(_iter4);
          oprot.WriteI64(Rows_appended[_iter4]);
        }
        oprot.WriteMapEnd();
      }
      oprot.WriteFieldEnd();
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("TInsertResult(");
      sb.Append("Rows_appended: ");
      sb.Append(Rows_appended);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
