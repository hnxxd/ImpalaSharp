/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace ImpalaSharp.Thrift.Impala
{
  public partial class ImpalaService {
    public interface Iface : ImpalaSharp.Thrift.Beeswax.BeeswaxService.Iface {
      ImpalaSharp.Thrift.Impala.TStatus Cancel(ImpalaSharp.Thrift.Beeswax.QueryHandle query_id);
      #if SILVERLIGHT
      IAsyncResult Begin_Cancel(AsyncCallback callback, object state, ImpalaSharp.Thrift.Beeswax.QueryHandle query_id);
      ImpalaSharp.Thrift.Impala.TStatus End_Cancel(IAsyncResult asyncResult);
      #endif
      ImpalaSharp.Thrift.Impala.TStatus ResetCatalog();
      #if SILVERLIGHT
      IAsyncResult Begin_ResetCatalog(AsyncCallback callback, object state);
      ImpalaSharp.Thrift.Impala.TStatus End_ResetCatalog(IAsyncResult asyncResult);
      #endif
      ImpalaSharp.Thrift.Impala.TStatus ResetTable(TResetTableReq request);
      #if SILVERLIGHT
      IAsyncResult Begin_ResetTable(AsyncCallback callback, object state, TResetTableReq request);
      ImpalaSharp.Thrift.Impala.TStatus End_ResetTable(IAsyncResult asyncResult);
      #endif
      string GetRuntimeProfile(ImpalaSharp.Thrift.Beeswax.QueryHandle query_id);
      #if SILVERLIGHT
      IAsyncResult Begin_GetRuntimeProfile(AsyncCallback callback, object state, ImpalaSharp.Thrift.Beeswax.QueryHandle query_id);
      string End_GetRuntimeProfile(IAsyncResult asyncResult);
      #endif
      TInsertResult CloseInsert(ImpalaSharp.Thrift.Beeswax.QueryHandle handle);
      #if SILVERLIGHT
      IAsyncResult Begin_CloseInsert(AsyncCallback callback, object state, ImpalaSharp.Thrift.Beeswax.QueryHandle handle);
      TInsertResult End_CloseInsert(IAsyncResult asyncResult);
      #endif
      TPingImpalaServiceResp PingImpalaService();
      #if SILVERLIGHT
      IAsyncResult Begin_PingImpalaService(AsyncCallback callback, object state);
      TPingImpalaServiceResp End_PingImpalaService(IAsyncResult asyncResult);
      #endif
    }

    public class Client : ImpalaSharp.Thrift.Beeswax.BeeswaxService.Client, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot) : base(iprot, oprot)
      {
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_Cancel(AsyncCallback callback, object state, ImpalaSharp.Thrift.Beeswax.QueryHandle query_id)
      {
        return send_Cancel(callback, state, query_id);
      }

      public ImpalaSharp.Thrift.Impala.TStatus End_Cancel(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_Cancel();
      }

      #endif

      public ImpalaSharp.Thrift.Impala.TStatus Cancel(ImpalaSharp.Thrift.Beeswax.QueryHandle query_id)
      {
        #if !SILVERLIGHT
        send_Cancel(query_id);
        return recv_Cancel();

        #else
        var asyncResult = Begin_Cancel(null, null, query_id);
        return End_Cancel(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Cancel(AsyncCallback callback, object state, ImpalaSharp.Thrift.Beeswax.QueryHandle query_id)
      #else
      public void send_Cancel(ImpalaSharp.Thrift.Beeswax.QueryHandle query_id)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Cancel", TMessageType.Call, seqid_));
        Cancel_args args = new Cancel_args();
        args.Query_id = query_id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public ImpalaSharp.Thrift.Impala.TStatus recv_Cancel()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Cancel_result result = new Cancel_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.error) {
          throw result.Error;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "Cancel failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_ResetCatalog(AsyncCallback callback, object state)
      {
        return send_ResetCatalog(callback, state);
      }

      public ImpalaSharp.Thrift.Impala.TStatus End_ResetCatalog(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_ResetCatalog();
      }

      #endif

      public ImpalaSharp.Thrift.Impala.TStatus ResetCatalog()
      {
        #if !SILVERLIGHT
        send_ResetCatalog();
        return recv_ResetCatalog();

        #else
        var asyncResult = Begin_ResetCatalog(null, null);
        return End_ResetCatalog(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_ResetCatalog(AsyncCallback callback, object state)
      #else
      public void send_ResetCatalog()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("ResetCatalog", TMessageType.Call, seqid_));
        ResetCatalog_args args = new ResetCatalog_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public ImpalaSharp.Thrift.Impala.TStatus recv_ResetCatalog()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ResetCatalog_result result = new ResetCatalog_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ResetCatalog failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_ResetTable(AsyncCallback callback, object state, TResetTableReq request)
      {
        return send_ResetTable(callback, state, request);
      }

      public ImpalaSharp.Thrift.Impala.TStatus End_ResetTable(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_ResetTable();
      }

      #endif

      public ImpalaSharp.Thrift.Impala.TStatus ResetTable(TResetTableReq request)
      {
        #if !SILVERLIGHT
        send_ResetTable(request);
        return recv_ResetTable();

        #else
        var asyncResult = Begin_ResetTable(null, null, request);
        return End_ResetTable(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_ResetTable(AsyncCallback callback, object state, TResetTableReq request)
      #else
      public void send_ResetTable(TResetTableReq request)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("ResetTable", TMessageType.Call, seqid_));
        ResetTable_args args = new ResetTable_args();
        args.Request = request;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public ImpalaSharp.Thrift.Impala.TStatus recv_ResetTable()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ResetTable_result result = new ResetTable_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ResetTable failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetRuntimeProfile(AsyncCallback callback, object state, ImpalaSharp.Thrift.Beeswax.QueryHandle query_id)
      {
        return send_GetRuntimeProfile(callback, state, query_id);
      }

      public string End_GetRuntimeProfile(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetRuntimeProfile();
      }

      #endif

      public string GetRuntimeProfile(ImpalaSharp.Thrift.Beeswax.QueryHandle query_id)
      {
        #if !SILVERLIGHT
        send_GetRuntimeProfile(query_id);
        return recv_GetRuntimeProfile();

        #else
        var asyncResult = Begin_GetRuntimeProfile(null, null, query_id);
        return End_GetRuntimeProfile(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetRuntimeProfile(AsyncCallback callback, object state, ImpalaSharp.Thrift.Beeswax.QueryHandle query_id)
      #else
      public void send_GetRuntimeProfile(ImpalaSharp.Thrift.Beeswax.QueryHandle query_id)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetRuntimeProfile", TMessageType.Call, seqid_));
        GetRuntimeProfile_args args = new GetRuntimeProfile_args();
        args.Query_id = query_id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_GetRuntimeProfile()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetRuntimeProfile_result result = new GetRuntimeProfile_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.error) {
          throw result.Error;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetRuntimeProfile failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_CloseInsert(AsyncCallback callback, object state, ImpalaSharp.Thrift.Beeswax.QueryHandle handle)
      {
        return send_CloseInsert(callback, state, handle);
      }

      public TInsertResult End_CloseInsert(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_CloseInsert();
      }

      #endif

      public TInsertResult CloseInsert(ImpalaSharp.Thrift.Beeswax.QueryHandle handle)
      {
        #if !SILVERLIGHT
        send_CloseInsert(handle);
        return recv_CloseInsert();

        #else
        var asyncResult = Begin_CloseInsert(null, null, handle);
        return End_CloseInsert(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_CloseInsert(AsyncCallback callback, object state, ImpalaSharp.Thrift.Beeswax.QueryHandle handle)
      #else
      public void send_CloseInsert(ImpalaSharp.Thrift.Beeswax.QueryHandle handle)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("CloseInsert", TMessageType.Call, seqid_));
        CloseInsert_args args = new CloseInsert_args();
        args.Handle = handle;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public TInsertResult recv_CloseInsert()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        CloseInsert_result result = new CloseInsert_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.error) {
          throw result.Error;
        }
        if (result.__isset.error2) {
          throw result.Error2;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "CloseInsert failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_PingImpalaService(AsyncCallback callback, object state)
      {
        return send_PingImpalaService(callback, state);
      }

      public TPingImpalaServiceResp End_PingImpalaService(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_PingImpalaService();
      }

      #endif

      public TPingImpalaServiceResp PingImpalaService()
      {
        #if !SILVERLIGHT
        send_PingImpalaService();
        return recv_PingImpalaService();

        #else
        var asyncResult = Begin_PingImpalaService(null, null);
        return End_PingImpalaService(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_PingImpalaService(AsyncCallback callback, object state)
      #else
      public void send_PingImpalaService()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("PingImpalaService", TMessageType.Call, seqid_));
        PingImpalaService_args args = new PingImpalaService_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public TPingImpalaServiceResp recv_PingImpalaService()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        PingImpalaService_result result = new PingImpalaService_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "PingImpalaService failed: unknown result");
      }

    }
    public class Processor : ImpalaSharp.Thrift.Beeswax.BeeswaxService.Processor, TProcessor {
      public Processor(Iface iface) : base(iface)
      {
        iface_ = iface;
        processMap_["Cancel"] = Cancel_Process;
        processMap_["ResetCatalog"] = ResetCatalog_Process;
        processMap_["ResetTable"] = ResetTable_Process;
        processMap_["GetRuntimeProfile"] = GetRuntimeProfile_Process;
        processMap_["CloseInsert"] = CloseInsert_Process;
        processMap_["PingImpalaService"] = PingImpalaService_Process;
      }

      private Iface iface_;

      public new bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void Cancel_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Cancel_args args = new Cancel_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Cancel_result result = new Cancel_result();
        try {
          result.Success = iface_.Cancel(args.Query_id);
        } catch (ImpalaSharp.Thrift.Beeswax.BeeswaxException error) {
          result.Error = error;
        }
        oprot.WriteMessageBegin(new TMessage("Cancel", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ResetCatalog_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ResetCatalog_args args = new ResetCatalog_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ResetCatalog_result result = new ResetCatalog_result();
        result.Success = iface_.ResetCatalog();
        oprot.WriteMessageBegin(new TMessage("ResetCatalog", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ResetTable_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ResetTable_args args = new ResetTable_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ResetTable_result result = new ResetTable_result();
        result.Success = iface_.ResetTable(args.Request);
        oprot.WriteMessageBegin(new TMessage("ResetTable", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetRuntimeProfile_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetRuntimeProfile_args args = new GetRuntimeProfile_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetRuntimeProfile_result result = new GetRuntimeProfile_result();
        try {
          result.Success = iface_.GetRuntimeProfile(args.Query_id);
        } catch (ImpalaSharp.Thrift.Beeswax.BeeswaxException error) {
          result.Error = error;
        }
        oprot.WriteMessageBegin(new TMessage("GetRuntimeProfile", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void CloseInsert_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        CloseInsert_args args = new CloseInsert_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        CloseInsert_result result = new CloseInsert_result();
        try {
          result.Success = iface_.CloseInsert(args.Handle);
        } catch (ImpalaSharp.Thrift.Beeswax.QueryNotFoundException error) {
          result.Error = error;
        } catch (ImpalaSharp.Thrift.Beeswax.BeeswaxException error2) {
          result.Error2 = error2;
        }
        oprot.WriteMessageBegin(new TMessage("CloseInsert", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void PingImpalaService_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        PingImpalaService_args args = new PingImpalaService_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        PingImpalaService_result result = new PingImpalaService_result();
        result.Success = iface_.PingImpalaService();
        oprot.WriteMessageBegin(new TMessage("PingImpalaService", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Cancel_args : TBase
    {
      private ImpalaSharp.Thrift.Beeswax.QueryHandle _query_id;

      public ImpalaSharp.Thrift.Beeswax.QueryHandle Query_id
      {
        get
        {
          return _query_id;
        }
        set
        {
          __isset.query_id = true;
          this._query_id = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool query_id;
      }

      public Cancel_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Query_id = new ImpalaSharp.Thrift.Beeswax.QueryHandle();
                Query_id.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Cancel_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Query_id != null && __isset.query_id) {
          field.Name = "query_id";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Query_id.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Cancel_args(");
        sb.Append("Query_id: ");
        sb.Append(Query_id== null ? "<null>" : Query_id.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Cancel_result : TBase
    {
      private ImpalaSharp.Thrift.Impala.TStatus _success;
      private ImpalaSharp.Thrift.Beeswax.BeeswaxException _error;

      public ImpalaSharp.Thrift.Impala.TStatus Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ImpalaSharp.Thrift.Beeswax.BeeswaxException Error
      {
        get
        {
          return _error;
        }
        set
        {
          __isset.error = true;
          this._error = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool error;
      }

      public Cancel_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ImpalaSharp.Thrift.Impala.TStatus();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Error = new ImpalaSharp.Thrift.Beeswax.BeeswaxException();
                Error.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Cancel_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.error) {
          if (Error != null) {
            field.Name = "Error";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Error.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Cancel_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Error: ");
        sb.Append(Error== null ? "<null>" : Error.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ResetCatalog_args : TBase
    {

      public ResetCatalog_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ResetCatalog_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ResetCatalog_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ResetCatalog_result : TBase
    {
      private ImpalaSharp.Thrift.Impala.TStatus _success;

      public ImpalaSharp.Thrift.Impala.TStatus Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public ResetCatalog_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ImpalaSharp.Thrift.Impala.TStatus();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ResetCatalog_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ResetCatalog_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ResetTable_args : TBase
    {
      private TResetTableReq _request;

      public TResetTableReq Request
      {
        get
        {
          return _request;
        }
        set
        {
          __isset.request = true;
          this._request = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool request;
      }

      public ResetTable_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Request = new TResetTableReq();
                Request.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ResetTable_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Request != null && __isset.request) {
          field.Name = "request";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Request.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ResetTable_args(");
        sb.Append("Request: ");
        sb.Append(Request== null ? "<null>" : Request.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ResetTable_result : TBase
    {
      private ImpalaSharp.Thrift.Impala.TStatus _success;

      public ImpalaSharp.Thrift.Impala.TStatus Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public ResetTable_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ImpalaSharp.Thrift.Impala.TStatus();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ResetTable_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ResetTable_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetRuntimeProfile_args : TBase
    {
      private ImpalaSharp.Thrift.Beeswax.QueryHandle _query_id;

      public ImpalaSharp.Thrift.Beeswax.QueryHandle Query_id
      {
        get
        {
          return _query_id;
        }
        set
        {
          __isset.query_id = true;
          this._query_id = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool query_id;
      }

      public GetRuntimeProfile_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Query_id = new ImpalaSharp.Thrift.Beeswax.QueryHandle();
                Query_id.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetRuntimeProfile_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Query_id != null && __isset.query_id) {
          field.Name = "query_id";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Query_id.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetRuntimeProfile_args(");
        sb.Append("Query_id: ");
        sb.Append(Query_id== null ? "<null>" : Query_id.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetRuntimeProfile_result : TBase
    {
      private string _success;
      private ImpalaSharp.Thrift.Beeswax.BeeswaxException _error;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ImpalaSharp.Thrift.Beeswax.BeeswaxException Error
      {
        get
        {
          return _error;
        }
        set
        {
          __isset.error = true;
          this._error = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool error;
      }

      public GetRuntimeProfile_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Error = new ImpalaSharp.Thrift.Beeswax.BeeswaxException();
                Error.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetRuntimeProfile_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.error) {
          if (Error != null) {
            field.Name = "Error";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Error.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetRuntimeProfile_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",Error: ");
        sb.Append(Error== null ? "<null>" : Error.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class CloseInsert_args : TBase
    {
      private ImpalaSharp.Thrift.Beeswax.QueryHandle _handle;

      public ImpalaSharp.Thrift.Beeswax.QueryHandle Handle
      {
        get
        {
          return _handle;
        }
        set
        {
          __isset.handle = true;
          this._handle = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool handle;
      }

      public CloseInsert_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Handle = new ImpalaSharp.Thrift.Beeswax.QueryHandle();
                Handle.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("CloseInsert_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Handle != null && __isset.handle) {
          field.Name = "handle";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Handle.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("CloseInsert_args(");
        sb.Append("Handle: ");
        sb.Append(Handle== null ? "<null>" : Handle.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class CloseInsert_result : TBase
    {
      private TInsertResult _success;
      private ImpalaSharp.Thrift.Beeswax.QueryNotFoundException _error;
      private ImpalaSharp.Thrift.Beeswax.BeeswaxException _error2;

      public TInsertResult Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public ImpalaSharp.Thrift.Beeswax.QueryNotFoundException Error
      {
        get
        {
          return _error;
        }
        set
        {
          __isset.error = true;
          this._error = value;
        }
      }

      public ImpalaSharp.Thrift.Beeswax.BeeswaxException Error2
      {
        get
        {
          return _error2;
        }
        set
        {
          __isset.error2 = true;
          this._error2 = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool error;
        public bool error2;
      }

      public CloseInsert_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TInsertResult();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Error = new ImpalaSharp.Thrift.Beeswax.QueryNotFoundException();
                Error.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Error2 = new ImpalaSharp.Thrift.Beeswax.BeeswaxException();
                Error2.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("CloseInsert_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.error) {
          if (Error != null) {
            field.Name = "Error";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Error.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.error2) {
          if (Error2 != null) {
            field.Name = "Error2";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Error2.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("CloseInsert_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Error: ");
        sb.Append(Error== null ? "<null>" : Error.ToString());
        sb.Append(",Error2: ");
        sb.Append(Error2== null ? "<null>" : Error2.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PingImpalaService_args : TBase
    {

      public PingImpalaService_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("PingImpalaService_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("PingImpalaService_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PingImpalaService_result : TBase
    {
      private TPingImpalaServiceResp _success;

      public TPingImpalaServiceResp Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public PingImpalaService_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new TPingImpalaServiceResp();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("PingImpalaService_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("PingImpalaService_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }

  }
}
