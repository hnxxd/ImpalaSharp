/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace ImpalaSharp.Thrift.Impala
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TStatus : TBase
  {
    private List<string> _error_msgs;

    /// <summary>
    /// 
    /// <seealso cref="TStatusCode"/>
    /// </summary>
    public TStatusCode Status_code { get; set; }

    public List<string> Error_msgs
    {
      get
      {
        return _error_msgs;
      }
      set
      {
        __isset.error_msgs = true;
        this._error_msgs = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool error_msgs;
    }

    public TStatus() {
    }

    public TStatus(TStatusCode status_code) : this() {
      this.Status_code = status_code;
    }

    public void Read (TProtocol iprot)
    {
      bool isset_status_code = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              Status_code = (TStatusCode)iprot.ReadI32();
              isset_status_code = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                Error_msgs = new List<string>();
                TList _list0 = iprot.ReadListBegin();
                for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                {
                  string _elem2 = null;
                  _elem2 = iprot.ReadString();
                  Error_msgs.Add(_elem2);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_status_code)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("TStatus");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      field.Name = "status_code";
      field.Type = TType.I32;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteI32((int)Status_code);
      oprot.WriteFieldEnd();
      if (Error_msgs != null && __isset.error_msgs) {
        field.Name = "error_msgs";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, Error_msgs.Count));
          foreach (string _iter3 in Error_msgs)
          {
            oprot.WriteString(_iter3);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("TStatus(");
      sb.Append("Status_code: ");
      sb.Append(Status_code);
      sb.Append(",Error_msgs: ");
      sb.Append(Error_msgs);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
