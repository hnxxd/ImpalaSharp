/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace ImpalaSharp.Thrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TExecuteStatementReq : TBase
  {
    private Dictionary<string, string> _confOverlay;

    public TSessionHandle SessionHandle { get; set; }

    public string Statement { get; set; }

    public Dictionary<string, string> ConfOverlay
    {
      get
      {
        return _confOverlay;
      }
      set
      {
        __isset.confOverlay = true;
        this._confOverlay = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool confOverlay;
    }

    public TExecuteStatementReq() {
    }

    public TExecuteStatementReq(TSessionHandle sessionHandle, string statement) : this() {
      this.SessionHandle = sessionHandle;
      this.Statement = statement;
    }

    public void Read (TProtocol iprot)
    {
      bool isset_sessionHandle = false;
      bool isset_statement = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              SessionHandle = new TSessionHandle();
              SessionHandle.Read(iprot);
              isset_sessionHandle = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Statement = iprot.ReadString();
              isset_statement = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Map) {
              {
                ConfOverlay = new Dictionary<string, string>();
                TMap _map72 = iprot.ReadMapBegin();
                for( int _i73 = 0; _i73 < _map72.Count; ++_i73)
                {
                  string _key74;
                  string _val75;
                  _key74 = iprot.ReadString();
                  _val75 = iprot.ReadString();
                  ConfOverlay[_key74] = _val75;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_sessionHandle)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_statement)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("TExecuteStatementReq");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      field.Name = "sessionHandle";
      field.Type = TType.Struct;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      SessionHandle.Write(oprot);
      oprot.WriteFieldEnd();
      field.Name = "statement";
      field.Type = TType.String;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      oprot.WriteString(Statement);
      oprot.WriteFieldEnd();
      if (ConfOverlay != null && __isset.confOverlay) {
        field.Name = "confOverlay";
        field.Type = TType.Map;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.String, ConfOverlay.Count));
          foreach (string _iter76 in ConfOverlay.Keys)
          {
            oprot.WriteString(_iter76);
            oprot.WriteString(ConfOverlay[_iter76]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("TExecuteStatementReq(");
      sb.Append("SessionHandle: ");
      sb.Append(SessionHandle== null ? "<null>" : SessionHandle.ToString());
      sb.Append(",Statement: ");
      sb.Append(Statement);
      sb.Append(",ConfOverlay: ");
      sb.Append(ConfOverlay);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
