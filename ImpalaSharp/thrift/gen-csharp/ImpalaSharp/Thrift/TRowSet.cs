/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace ImpalaSharp.Thrift
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class TRowSet : TBase
  {
    private List<TColumn> _columns;

    public long StartRowOffset { get; set; }

    public List<TRow> Rows { get; set; }

    public List<TColumn> Columns
    {
      get
      {
        return _columns;
      }
      set
      {
        __isset.columns = true;
        this._columns = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool columns;
    }

    public TRowSet() {
    }

    public TRowSet(long startRowOffset, List<TRow> rows) : this() {
      this.StartRowOffset = startRowOffset;
      this.Rows = rows;
    }

    public void Read (TProtocol iprot)
    {
      bool isset_startRowOffset = false;
      bool isset_rows = false;
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64) {
              StartRowOffset = iprot.ReadI64();
              isset_startRowOffset = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                Rows = new List<TRow>();
                TList _list50 = iprot.ReadListBegin();
                for( int _i51 = 0; _i51 < _list50.Count; ++_i51)
                {
                  TRow _elem52 = new TRow();
                  _elem52 = new TRow();
                  _elem52.Read(iprot);
                  Rows.Add(_elem52);
                }
                iprot.ReadListEnd();
              }
              isset_rows = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                Columns = new List<TColumn>();
                TList _list53 = iprot.ReadListBegin();
                for( int _i54 = 0; _i54 < _list53.Count; ++_i54)
                {
                  TColumn _elem55 = new TColumn();
                  _elem55 = new TColumn();
                  _elem55.Read(iprot);
                  Columns.Add(_elem55);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
      if (!isset_startRowOffset)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
      if (!isset_rows)
        throw new TProtocolException(TProtocolException.INVALID_DATA);
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("TRowSet");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      field.Name = "startRowOffset";
      field.Type = TType.I64;
      field.ID = 1;
      oprot.WriteFieldBegin(field);
      oprot.WriteI64(StartRowOffset);
      oprot.WriteFieldEnd();
      field.Name = "rows";
      field.Type = TType.List;
      field.ID = 2;
      oprot.WriteFieldBegin(field);
      {
        oprot.WriteListBegin(new TList(TType.Struct, Rows.Count));
        foreach (TRow _iter56 in Rows)
        {
          _iter56.Write(oprot);
        }
        oprot.WriteListEnd();
      }
      oprot.WriteFieldEnd();
      if (Columns != null && __isset.columns) {
        field.Name = "columns";
        field.Type = TType.List;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Columns.Count));
          foreach (TColumn _iter57 in Columns)
          {
            _iter57.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("TRowSet(");
      sb.Append("StartRowOffset: ");
      sb.Append(StartRowOffset);
      sb.Append(",Rows: ");
      sb.Append(Rows);
      sb.Append(",Columns: ");
      sb.Append(Columns);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
